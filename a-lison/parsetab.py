
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL CHAR COMMA DIV DOUBLE ELSE ENDPROG ENDVARS EQUAL GREATER GREATEREQUAL ID IF INPUT INT LESS LESSEQUAL LOOP L_BRKT L_CURLY L_PAREN MAIN MINUS MULT NOT NOTEQUAL OR OUTPUT PLUS REPORT RETURN ROUTINE R_BRKT R_CURLY R_PAREN SEMICOLON STARTPROG STRING VARS V_BOOL V_CHAR V_DOUBLE V_INTprogram : r1 STARTPROG vars r4 routines main ENDPROGr1 : r4 : vars : VARS decvars ENDVARSdecvars : type r2 dim1array decassign SEMICOLON r3 decvars\n\t\t\t   | emptyr2 : IDr3 : dim1array : L_BRKT V_INT R_BRKT dim2array\n\t\t\t\t | emptydim2array : L_BRKT V_INT R_BRKT\n\t\t\t\t | emptydecassign : ASSIGN assignvalue\n\t\t\t\t | emptyassignvalue : constant\n\t\t\t\t   | assignarray\n\t\t\t\t   | emptyassignarray : L_BRKT assignarray2 R_BRKT\n\t\t\t\t   | emptyassignarray2 : assignarray3\n\t\t\t\t    | assignarray5assignarray3 : constant assignarray4\n\t\t\t\t    | emptyassignarray4 : COMMA assignarray3\n\t\t\t\t    | emptyassignarray5 : L_BRKT assignarray6 R_BRKT assignarray8assignarray6 : assignarray7\n\t\t\t\t\t| emptyassignarray7 : COMMA assignarray6\n\t\t\t\t\t| emptyassignarray8 : COMMA assignarray5\n\t\t\t\t\t| emptyroutines : decroutine routines\n\t\t\t\t| emptydecroutine : ROUTINE dectype ID L_PAREN params R_PAREN L_CURLY vars block R_CURLYroutinecall : ID L_PAREN paramcall R_PARENparamcall : expression paramcall2\n\t\t\t\t | emptyparamcall2 : COMMA paramcall\n\t\t\t\t  | emptydectype : type\n\t\t\t   | emptyparams : type ID params2\n\t\t\t  | emptyparams2 : COMMA type ID params2\n\t\t\t   | emptymain : MAIN L_CURLY vars block R_CURLYconstant : V_INT\n\t\t\t\t| V_DOUBLE\n\t\t\t\t| V_CHAR\n\t\t\t\t| V_BOOLdecid : ID decid2decid2 : L_BRKT expression R_BRKT decid3\n\t\t\t  | emptydecid3 : L_BRKT expression R_BRKT \n\t\t\t  | emptytype : INT\n\t\t\t| DOUBLE\n\t\t\t| CHAR\n\t\t\t| BOOL\n\t\t\t| STRINGblock : loop \n\t\t\t | condition\n\t\t\t | assignvalue SEMICOLON\n\t\t\t | input SEMICOLON\n\t\t\t | output SEMICOLON\n\t\t\t | return SEMICOLON\n\t\t\t | empty\nloop : LOOP L_PAREN expression R_PARENcondition : IF L_PAREN expression R_PAREN L_CURLY block R_CURLY elseelse : ELSE L_CURLY block R_CURLY\n\t\t  | emptyinput : INPUT L_PAREN expression R_PARENoutput : OUTPUT L_PAREN expression R_PARENreturn : RETURN expressionexpression : relational addlogicaddlogic : AND expression\n\t\t\t\t| OR expression\n\t\t\t\t| emptyrelational : mathsum addrelationaladdrelational : GREATER\n\t\t\t\t\t | LESS\n\t\t\t\t\t | EQUAL\n\t\t\t\t\t | GREATEREQUAL\n\t\t\t\t\t | LESSEQUAL\n\t\t\t\t\t | NOTEQUAL\n\t\t\t\t\t | emptymathsum : mathmult addmathsumaddmathsum : PLUS\n\t\t\t\t  | MINUS\n\t\t\t\t  | emptymathmult : prefactor addmathmultaddmathmult : MULT\n\t\t\t\t  | DIV\n\t\t\t\t  | emptyprefactor : negativefactor factornegativefactor : NOT\n\t\t\t\t\t  | emptyfactor : decid\n\t\t\t\t  | constant\n\t\t\t\t  | L_PAREN expression R_PAREN\n\t\t\t\t  | routinecallempty :'
    
_lr_action_items = {'STARTPROG':([0,2,],[-2,3,]),'$end':([1,31,],[0,-1,]),'VARS':([3,32,136,],[5,5,5,]),'ROUTINE':([4,6,16,19,175,],[-3,18,18,-4,-35,]),'MAIN':([4,6,15,16,17,19,24,175,],[-3,-103,23,-103,-34,-4,-33,-35,]),'INT':([5,18,39,40,67,138,],[10,10,10,-8,10,10,]),'DOUBLE':([5,18,39,40,67,138,],[11,11,11,-8,11,11,]),'CHAR':([5,18,39,40,67,138,],[12,12,12,-8,12,12,]),'BOOL':([5,18,39,40,67,138,],[13,13,13,-8,13,13,]),'STRING':([5,18,39,40,67,138,],[14,14,14,-8,14,14,]),'ENDVARS':([5,7,9,40,67,96,],[-103,19,-6,-8,-103,-5,]),'ID':([8,10,11,12,13,14,18,25,26,27,63,65,82,83,84,85,91,92,93,111,112,133,152,153,156,164,172,179,],[21,-57,-58,-59,-60,-61,-103,33,-41,-42,-103,95,-103,-103,-103,-103,135,-97,-98,-103,-103,-103,-103,-103,167,-98,-103,-103,]),'LOOP':([19,38,155,160,186,],[-4,59,59,59,59,]),'IF':([19,38,155,160,186,],[-4,60,60,60,60,]),'INPUT':([19,38,155,160,186,],[-4,61,61,61,61,]),'OUTPUT':([19,38,155,160,186,],[-4,62,62,62,62,]),'RETURN':([19,38,155,160,186,],[-4,63,63,63,63,]),'V_INT':([19,29,35,38,49,63,74,82,83,84,85,91,92,93,103,111,112,133,152,153,155,160,164,172,179,186,],[-4,37,45,45,45,-103,105,-103,-103,-103,-103,45,-97,-98,45,-103,-103,-103,-103,-103,45,45,-98,-103,-103,45,]),'V_DOUBLE':([19,35,38,49,63,82,83,84,85,91,92,93,103,111,112,133,152,153,155,160,164,172,179,186,],[-4,46,46,46,-103,-103,-103,-103,-103,46,-97,-98,46,-103,-103,-103,-103,-103,46,46,-98,-103,-103,46,]),'V_CHAR':([19,35,38,49,63,82,83,84,85,91,92,93,103,111,112,133,152,153,155,160,164,172,179,186,],[-4,47,47,47,-103,-103,-103,-103,-103,47,-97,-98,47,-103,-103,-103,-103,-103,47,47,-98,-103,-103,47,]),'V_BOOL':([19,35,38,49,63,82,83,84,85,91,92,93,103,111,112,133,152,153,155,160,164,172,179,186,],[-4,48,48,48,-103,-103,-103,-103,-103,48,-97,-98,48,-103,-103,-103,-103,-103,48,48,-98,-103,-103,48,]),'L_BRKT':([19,20,21,35,38,49,50,135,155,158,160,174,186,],[-4,29,-7,49,49,68,74,153,49,68,49,179,49,]),'R_CURLY':([19,38,51,52,53,58,78,79,80,81,144,155,160,166,169,177,182,184,186,188,189,],[-4,-103,77,-62,-63,-68,-64,-65,-66,-67,-69,-103,-103,175,177,-103,-70,-72,-103,189,-71,]),'SEMICOLON':([19,20,21,28,30,34,35,36,38,41,42,43,44,45,46,47,48,50,54,55,56,57,58,75,76,86,87,88,89,90,101,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,143,146,147,148,149,151,154,155,160,161,170,174,180,181,186,187,],[-4,-103,-7,-103,-10,40,-103,-14,-103,-13,-15,-16,-17,-48,-49,-50,-51,-103,78,79,80,81,-17,-9,-12,-75,-103,-103,-103,-103,-18,-76,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-11,-73,-74,-77,-78,-52,-54,-103,-103,-101,-36,-103,-53,-56,-103,-55,]),'ASSIGN':([20,21,28,30,50,75,76,143,],[-103,-7,35,-10,-103,-9,-12,-11,]),'ENDPROG':([22,77,],[31,-47,]),'L_CURLY':([23,94,145,183,],[32,136,160,186,]),'L_PAREN':([33,59,60,61,62,63,82,83,84,85,91,92,93,111,112,133,135,152,153,164,172,179,],[39,82,83,84,85,-103,-103,-103,-103,-103,133,-97,-98,-103,-103,-103,152,-103,-103,-98,-103,-103,]),'R_BRKT':([37,45,46,47,48,49,68,69,70,71,72,73,87,88,89,90,97,98,99,100,102,103,104,105,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,140,141,142,148,149,151,154,157,159,161,165,168,170,174,180,181,185,187,],[50,-48,-49,-50,-51,-103,-103,101,-20,-21,-103,-23,-103,-103,-103,-103,140,-27,-28,-103,-22,-103,-25,143,-76,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-103,-29,-24,-77,-78,-52,-54,-26,-32,-101,174,-31,-36,-103,-53,-56,187,-55,]),'R_PAREN':([39,45,46,47,48,64,66,87,88,89,90,95,106,107,108,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,137,139,148,149,150,151,152,154,161,162,163,164,167,170,171,172,173,174,176,178,180,181,187,],[-103,-48,-49,-50,-51,94,-44,-103,-103,-103,-103,-103,144,145,146,147,-76,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-43,-46,-77,-78,161,-52,-103,-54,-101,170,-103,-38,-103,-36,-37,-103,-40,-103,-45,-39,-53,-56,-55,]),'COMMA':([45,46,47,48,68,72,87,88,89,90,95,100,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,140,148,149,151,154,161,163,167,170,174,180,181,187,],[-48,-49,-50,-51,100,103,-103,-103,-103,-103,138,100,-76,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,158,-77,-78,-52,-54,-101,172,138,-36,-103,-53,-56,-55,]),'MULT':([45,46,47,48,90,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,127,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'DIV':([45,46,47,48,90,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,128,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'PLUS':([45,46,47,48,89,90,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,123,-103,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'MINUS':([45,46,47,48,89,90,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,124,-103,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'GREATER':([45,46,47,48,88,89,90,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,115,-103,-103,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'LESS':([45,46,47,48,88,89,90,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,116,-103,-103,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'EQUAL':([45,46,47,48,88,89,90,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,117,-103,-103,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'GREATEREQUAL':([45,46,47,48,88,89,90,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,118,-103,-103,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'LESSEQUAL':([45,46,47,48,88,89,90,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,119,-103,-103,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'NOTEQUAL':([45,46,47,48,88,89,90,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,120,-103,-103,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'AND':([45,46,47,48,87,88,89,90,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,111,-103,-103,-103,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'OR':([45,46,47,48,87,88,89,90,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,151,154,161,170,174,180,181,187,],[-48,-49,-50,-51,112,-103,-103,-103,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-99,-100,-102,-103,-52,-54,-101,-36,-103,-53,-56,-55,]),'NOT':([63,82,83,84,85,111,112,133,152,153,172,179,],[92,92,92,92,92,92,92,92,92,92,92,92,]),'ELSE':([177,],[183,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'r1':([0,],[2,]),'vars':([3,32,136,],[4,38,155,]),'r4':([4,],[6,]),'decvars':([5,67,],[7,96,]),'type':([5,18,39,67,138,],[8,26,65,8,156,]),'empty':([5,6,16,18,20,28,35,38,39,49,50,63,67,68,72,82,83,84,85,87,88,89,90,95,100,103,111,112,133,135,140,152,153,155,160,163,167,172,174,177,179,186,],[9,17,17,27,30,36,44,58,66,73,76,93,9,99,104,93,93,93,93,113,121,125,129,139,99,73,93,93,93,154,159,164,93,58,58,173,139,164,181,184,93,58,]),'routines':([6,16,],[15,24,]),'decroutine':([6,16,],[16,16,]),'r2':([8,],[20,]),'main':([15,],[22,]),'dectype':([18,],[25,]),'dim1array':([20,],[28,]),'decassign':([28,],[34,]),'assignvalue':([35,38,155,160,186,],[41,54,54,54,54,]),'constant':([35,38,49,91,103,155,160,186,],[42,42,72,132,72,42,42,42,]),'assignarray':([35,38,155,160,186,],[43,43,43,43,43,]),'block':([38,155,160,186,],[51,166,169,188,]),'loop':([38,155,160,186,],[52,52,52,52,]),'condition':([38,155,160,186,],[53,53,53,53,]),'input':([38,155,160,186,],[55,55,55,55,]),'output':([38,155,160,186,],[56,56,56,56,]),'return':([38,155,160,186,],[57,57,57,57,]),'params':([39,],[64,]),'r3':([40,],[67,]),'assignarray2':([49,],[69,]),'assignarray3':([49,103,],[70,142,]),'assignarray5':([49,158,],[71,168,]),'dim2array':([50,],[75,]),'expression':([63,82,83,84,85,111,112,133,152,153,172,179,],[86,106,107,108,109,148,149,150,163,165,163,185,]),'relational':([63,82,83,84,85,111,112,133,152,153,172,179,],[87,87,87,87,87,87,87,87,87,87,87,87,]),'mathsum':([63,82,83,84,85,111,112,133,152,153,172,179,],[88,88,88,88,88,88,88,88,88,88,88,88,]),'mathmult':([63,82,83,84,85,111,112,133,152,153,172,179,],[89,89,89,89,89,89,89,89,89,89,89,89,]),'prefactor':([63,82,83,84,85,111,112,133,152,153,172,179,],[90,90,90,90,90,90,90,90,90,90,90,90,]),'negativefactor':([63,82,83,84,85,111,112,133,152,153,172,179,],[91,91,91,91,91,91,91,91,91,91,91,91,]),'assignarray6':([68,100,],[97,141,]),'assignarray7':([68,100,],[98,98,]),'assignarray4':([72,],[102,]),'addlogic':([87,],[110,]),'addrelational':([88,],[114,]),'addmathsum':([89,],[122,]),'addmathmult':([90,],[126,]),'factor':([91,],[130,]),'decid':([91,],[131,]),'routinecall':([91,],[134,]),'params2':([95,167,],[137,176,]),'decid2':([135,],[151,]),'assignarray8':([140,],[157,]),'paramcall':([152,172,],[162,178,]),'paramcall2':([163,],[171,]),'decid3':([174,],[180,]),'else':([177,],[182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> r1 STARTPROG vars r4 routines main ENDPROG','program',7,'p_program','lexer.py',105),
  ('r1 -> <empty>','r1',0,'p_r1','lexer.py',108),
  ('r4 -> <empty>','r4',0,'p_r4','lexer.py',118),
  ('vars -> VARS decvars ENDVARS','vars',3,'p_vars','lexer.py',124),
  ('decvars -> type r2 dim1array decassign SEMICOLON r3 decvars','decvars',7,'p_decvars','lexer.py',127),
  ('decvars -> empty','decvars',1,'p_decvars','lexer.py',128),
  ('r2 -> ID','r2',1,'p_r2','lexer.py',131),
  ('r3 -> <empty>','r3',0,'p_r3','lexer.py',140),
  ('dim1array -> L_BRKT V_INT R_BRKT dim2array','dim1array',4,'p_dim1array','lexer.py',145),
  ('dim1array -> empty','dim1array',1,'p_dim1array','lexer.py',146),
  ('dim2array -> L_BRKT V_INT R_BRKT','dim2array',3,'p_dim2array','lexer.py',149),
  ('dim2array -> empty','dim2array',1,'p_dim2array','lexer.py',150),
  ('decassign -> ASSIGN assignvalue','decassign',2,'p_decassign','lexer.py',153),
  ('decassign -> empty','decassign',1,'p_decassign','lexer.py',154),
  ('assignvalue -> constant','assignvalue',1,'p_assignvalue','lexer.py',157),
  ('assignvalue -> assignarray','assignvalue',1,'p_assignvalue','lexer.py',158),
  ('assignvalue -> empty','assignvalue',1,'p_assignvalue','lexer.py',159),
  ('assignarray -> L_BRKT assignarray2 R_BRKT','assignarray',3,'p_assignarray','lexer.py',162),
  ('assignarray -> empty','assignarray',1,'p_assignarray','lexer.py',163),
  ('assignarray2 -> assignarray3','assignarray2',1,'p_assignarray2','lexer.py',166),
  ('assignarray2 -> assignarray5','assignarray2',1,'p_assignarray2','lexer.py',167),
  ('assignarray3 -> constant assignarray4','assignarray3',2,'p_assignarray3','lexer.py',170),
  ('assignarray3 -> empty','assignarray3',1,'p_assignarray3','lexer.py',171),
  ('assignarray4 -> COMMA assignarray3','assignarray4',2,'p_assignarray4','lexer.py',174),
  ('assignarray4 -> empty','assignarray4',1,'p_assignarray4','lexer.py',175),
  ('assignarray5 -> L_BRKT assignarray6 R_BRKT assignarray8','assignarray5',4,'p_assignarray5','lexer.py',178),
  ('assignarray6 -> assignarray7','assignarray6',1,'p_assignarray6','lexer.py',181),
  ('assignarray6 -> empty','assignarray6',1,'p_assignarray6','lexer.py',182),
  ('assignarray7 -> COMMA assignarray6','assignarray7',2,'p_assignarray7','lexer.py',185),
  ('assignarray7 -> empty','assignarray7',1,'p_assignarray7','lexer.py',186),
  ('assignarray8 -> COMMA assignarray5','assignarray8',2,'p_assignarray8','lexer.py',189),
  ('assignarray8 -> empty','assignarray8',1,'p_assignarray8','lexer.py',190),
  ('routines -> decroutine routines','routines',2,'p_routines','lexer.py',192),
  ('routines -> empty','routines',1,'p_routines','lexer.py',193),
  ('decroutine -> ROUTINE dectype ID L_PAREN params R_PAREN L_CURLY vars block R_CURLY','decroutine',10,'p_decroutine','lexer.py',196),
  ('routinecall -> ID L_PAREN paramcall R_PAREN','routinecall',4,'p_routinecall','lexer.py',207),
  ('paramcall -> expression paramcall2','paramcall',2,'p_paramcall','lexer.py',210),
  ('paramcall -> empty','paramcall',1,'p_paramcall','lexer.py',211),
  ('paramcall2 -> COMMA paramcall','paramcall2',2,'p_paramcall2','lexer.py',214),
  ('paramcall2 -> empty','paramcall2',1,'p_paramcall2','lexer.py',215),
  ('dectype -> type','dectype',1,'p_dectype','lexer.py',218),
  ('dectype -> empty','dectype',1,'p_dectype','lexer.py',219),
  ('params -> type ID params2','params',3,'p_params','lexer.py',222),
  ('params -> empty','params',1,'p_params','lexer.py',223),
  ('params2 -> COMMA type ID params2','params2',4,'p_pararms2','lexer.py',226),
  ('params2 -> empty','params2',1,'p_pararms2','lexer.py',227),
  ('main -> MAIN L_CURLY vars block R_CURLY','main',5,'p_main','lexer.py',230),
  ('constant -> V_INT','constant',1,'p_constant','lexer.py',234),
  ('constant -> V_DOUBLE','constant',1,'p_constant','lexer.py',235),
  ('constant -> V_CHAR','constant',1,'p_constant','lexer.py',236),
  ('constant -> V_BOOL','constant',1,'p_constant','lexer.py',237),
  ('decid -> ID decid2','decid',2,'p_decid','lexer.py',242),
  ('decid2 -> L_BRKT expression R_BRKT decid3','decid2',4,'p_decid2','lexer.py',245),
  ('decid2 -> empty','decid2',1,'p_decid2','lexer.py',246),
  ('decid3 -> L_BRKT expression R_BRKT','decid3',3,'p_decid3','lexer.py',249),
  ('decid3 -> empty','decid3',1,'p_decid3','lexer.py',250),
  ('type -> INT','type',1,'p_type','lexer.py',253),
  ('type -> DOUBLE','type',1,'p_type','lexer.py',254),
  ('type -> CHAR','type',1,'p_type','lexer.py',255),
  ('type -> BOOL','type',1,'p_type','lexer.py',256),
  ('type -> STRING','type',1,'p_type','lexer.py',257),
  ('block -> loop','block',1,'p_block','lexer.py',262),
  ('block -> condition','block',1,'p_block','lexer.py',263),
  ('block -> assignvalue SEMICOLON','block',2,'p_block','lexer.py',264),
  ('block -> input SEMICOLON','block',2,'p_block','lexer.py',265),
  ('block -> output SEMICOLON','block',2,'p_block','lexer.py',266),
  ('block -> return SEMICOLON','block',2,'p_block','lexer.py',267),
  ('block -> empty','block',1,'p_block','lexer.py',268),
  ('loop -> LOOP L_PAREN expression R_PAREN','loop',4,'p_loop','lexer.py',272),
  ('condition -> IF L_PAREN expression R_PAREN L_CURLY block R_CURLY else','condition',8,'p_condition','lexer.py',275),
  ('else -> ELSE L_CURLY block R_CURLY','else',4,'p_else','lexer.py',278),
  ('else -> empty','else',1,'p_else','lexer.py',279),
  ('input -> INPUT L_PAREN expression R_PAREN','input',4,'p_input','lexer.py',282),
  ('output -> OUTPUT L_PAREN expression R_PAREN','output',4,'p_output','lexer.py',285),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',288),
  ('expression -> relational addlogic','expression',2,'p_expression','lexer.py',290),
  ('addlogic -> AND expression','addlogic',2,'p_addlogic','lexer.py',293),
  ('addlogic -> OR expression','addlogic',2,'p_addlogic','lexer.py',294),
  ('addlogic -> empty','addlogic',1,'p_addlogic','lexer.py',295),
  ('relational -> mathsum addrelational','relational',2,'p_relational','lexer.py',298),
  ('addrelational -> GREATER','addrelational',1,'p_addrelational','lexer.py',301),
  ('addrelational -> LESS','addrelational',1,'p_addrelational','lexer.py',302),
  ('addrelational -> EQUAL','addrelational',1,'p_addrelational','lexer.py',303),
  ('addrelational -> GREATEREQUAL','addrelational',1,'p_addrelational','lexer.py',304),
  ('addrelational -> LESSEQUAL','addrelational',1,'p_addrelational','lexer.py',305),
  ('addrelational -> NOTEQUAL','addrelational',1,'p_addrelational','lexer.py',306),
  ('addrelational -> empty','addrelational',1,'p_addrelational','lexer.py',307),
  ('mathsum -> mathmult addmathsum','mathsum',2,'p_mathsum','lexer.py',310),
  ('addmathsum -> PLUS','addmathsum',1,'p_addmathsum','lexer.py',313),
  ('addmathsum -> MINUS','addmathsum',1,'p_addmathsum','lexer.py',314),
  ('addmathsum -> empty','addmathsum',1,'p_addmathsum','lexer.py',315),
  ('mathmult -> prefactor addmathmult','mathmult',2,'p_mathmult','lexer.py',318),
  ('addmathmult -> MULT','addmathmult',1,'p_addmathmult','lexer.py',321),
  ('addmathmult -> DIV','addmathmult',1,'p_addmathmult','lexer.py',322),
  ('addmathmult -> empty','addmathmult',1,'p_addmathmult','lexer.py',323),
  ('prefactor -> negativefactor factor','prefactor',2,'p_prefactor','lexer.py',326),
  ('negativefactor -> NOT','negativefactor',1,'p_negativefactor','lexer.py',329),
  ('negativefactor -> empty','negativefactor',1,'p_negativefactor','lexer.py',330),
  ('factor -> decid','factor',1,'p_factor','lexer.py',333),
  ('factor -> constant','factor',1,'p_factor','lexer.py',334),
  ('factor -> L_PAREN expression R_PAREN','factor',3,'p_factor','lexer.py',335),
  ('factor -> routinecall','factor',1,'p_factor','lexer.py',336),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',339),
]
